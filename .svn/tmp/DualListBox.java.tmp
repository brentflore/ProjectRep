package gui;

import domein.domein.CampusController;
import domein.tableModel.SoortTableModel;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Iterator;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.ListModel;

import domein.listModel.SortedListModel;
import domein.tableModel.StudentTableModel;
import javax.swing.table.TableModel;

public class DualListBox extends javax.swing.JPanel
{
        private static final String ADD_BUTTON_LABEL =    "Selecteer studenten";
        private static final String REMOVE_BUTTON_LABEL = "Verwijder studenten";

        private JList sourceList;
        private JList destList;

	private OverzichtPanel overzichtStudentenPanelSrc;
	private OverzichtPanel overzichtStudentenPanelDest;
        private JButton addButton;
        private JButton removeButton;
	private CampusController controller;
        private GuiController guiController;
        
        private GuiController gController;
        
        private Boolean flag = false;
        
        private TableModel stmodel;

        public DualListBox(CampusController controller, GuiController gController)
        {
            super();
            this.controller = controller;
            this.gController = gController;
            //System.out.println("04 - listbox");
            initGui();
        }
        
        // Duplicate code hier ok√©? - K
        private void initGui() 
	{
		try 
		{
			this.setPreferredSize(new java.awt.Dimension(775, 300));
			this.setLayout(null);
			{
                                stmodel = controller.geefTableModel(SoortTableModel.STUDENT);
<<<<<<< .mine
                                this.guiController = new GuiController((StudentTableModel) stmodel);
                                guiController.setLijst("alle");
				overzichtStudentenPanelSrc = 
						new OverzichtPanel(stmodel, "Overzicht Studenten");
=======
                                gController.setTableModel((StudentTableModel) stmodel);
                                        
				overzichtStudentenPanelSrc = new OverzichtPanel(stmodel, "Overzicht Studenten");
>>>>>>> .r107
                                //gController = new GuiController((StudentTableModel) stmodel);// plaats? Want mag maar 1 keer aangemaakt worden => Plaats oke?
                                //System.out.println("05 - overzichtpanel 1 " + overzichtStudentenPanelSrc);
				this.add(overzichtStudentenPanelSrc);
				overzichtStudentenPanelSrc.setBounds(20, 20, 500, 115);
			}
<<<<<<< .mine
                        {
                                guiController.setLijst("selectStudenten");
				overzichtStudentenPanelDest =   // Moet nog aangepast worden: vanuit domein aangepast tableModel doorgeven
						new OverzichtPanel(controller.geefTableModel(SoortTableModel.STUDENT), "Geselecteerde Studenten");
				// Zo wordt het overzichtPanel herbruikt, we geven hem een algemene tableModel
				this.add(overzichtStudentenPanelDest);
				overzichtStudentenPanelDest.setBounds(20, 150, 500, 115);
                            
			}
=======
                        {/*
                           overzichtStudentenPanelDest = new OverzichtPanel(stmodel, "Geselecteerde Studenten");
                           this.add(overzichtStudentenPanelDest);
                           overzichtStudentenPanelDest.setBounds(20, 150, 500, 115);
			*/}
>>>>>>> .r107
                        {
                                addButton = new JButton(ADD_BUTTON_LABEL);
                                this.add(addButton);
                                addButton.setBounds(530, 35, 200, 25);
                                addButton.addActionListener(new AddListener());
                                
                                removeButton = new JButton(REMOVE_BUTTON_LABEL);
                                this.add(removeButton);
                                removeButton.setBounds(530, 80/*165*/, 200, 25);
                                removeButton.addActionListener(new RemoveListener());
                        }
		} catch (Exception e) 
		{
			e.printStackTrace();
		}
	}
        
 private class AddListener implements ActionListener {
    public void actionPerformed(ActionEvent e) {
      //int[] i = overzichtStudentenPanelSrc.getSelectedRows();
      /* Hier die geselecteerde studenten ophalen: hoe? */
      //Object selected[] = sourceList.getSelectedValues();
      //System.out.println("test selected 01");
      gController.setLijst("SELECTED"); //flag = true;
      //System.out.println(flag);
      overzichtStudentenPanelDest = new OverzichtPanel(stmodel, "Geselecteerde Studenten");
      
      //System.out.println("test selected 03");
      
      gController.voegSchermToe(overzichtStudentenPanelDest);
      
    }
  }
 
  public void voegPanelToe(OverzichtPanel o) {
        //System.out.println("09 - Voeg scherm toe " + o);
        //System.out.println(this.add(o)); //.add(o);
        o.setBounds(20, 150, 500, 115);
        //System.out.println("10 - Voeg scherm toe " + o);
        o.setVisible(true);
        
        //System.out.println("11 - Voeg scherm toe");
    }

  private class RemoveListener implements ActionListener {
    public void actionPerformed(ActionEvent e) {
      Object selected[] = destList.getSelectedValues();
      //addSourceElements(selected);
      //clearDestinationSelected();
    }
  }
}