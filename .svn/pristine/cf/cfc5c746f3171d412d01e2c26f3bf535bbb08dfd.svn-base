package domein.domein;

import java.util.ArrayList;
import java.util.List;

import persistance.Mapper;
import persistance.MapperFactory;
import persistance.SoortMapper;

/*
 *       @author Jelle
 */
public class Campus<E> {

    private List<Gebruiker> gebruikers;
    private List<Student> studentenlijst;
    private List<Promotor> promotorenlijst;
    private List<Student> geselecteerdeStudenten;
    private Promotor geselecteerdePromotor;

    /**
     * @author Jelle
     * @param gebruikerType , PROMOTOR of STUDENT
     * @return een lijst van het gekozen gebruikertype
     */
    public List<Gebruiker> geefStudentenOfPromotorenlijst(String gebruikerType) {          // even deze methodes opgeruimd!
        if (gebruikers != null) {
            List<Gebruiker> studlijst = new ArrayList(), promolijst = new ArrayList();

            for (Gebruiker gebruiker : gebruikers) {
                if (gebruiker instanceof Student) {
                    studentenlijst.add((Student) gebruiker);
                } else if (gebruiker instanceof Promotor) {
                    promotorenlijst.add((Promotor) gebruiker);
                }

            }

            switch (gebruikerType) {
                case "PROMOTOR":
                    return promolijst;
                case "STUDENT":
                    return studlijst;
            }
        }
        return null;
    }

    /**
     * @author Jelle
     * @param student
     * @param promotor
     *
     * Koppelt de student en promotor
     */
    public void koppelStudentEnPromotor(Student student, Promotor promotor) {
        student.setPromotor(promotor);
        promotor.addStudent(student);
    }

    /**
     * @author Jelle
     * @param student
     * @return true als de student al een promotor heeft
     */
    public boolean checkHeeftStudentEenPromotor(Student student) {
        if (student.getPromotor() != null) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * @author Jelle
     * @param promotor
     * @return returned true als de promotor nog 1 of meer studenten in zijn
     * lijst kan steken.
     */
    public boolean heeftPromotorNogPlaatsVoorStudenten(Promotor promotor) {
        if (promotor.getMaxStudenten() > promotor.geefAantalStudenten()) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * @author Jelle
     * @param student
     * @param promotor Verwijdert de koppeling tussen een student en een
     * promotor
     */
    public void ontkoppelStudentEnPromotor(Student student, Promotor promotor) {
        student.setPromotor(null);
        promotor.verwijderStudent(student);
    }

    /**
     * @author Jelle
     * @param student verwijdert een student uit de lijst met geselecteerde
     * studenten
     */
    public void verwijderStudentUitLijst(Student student) {
        geselecteerdeStudenten.remove(student);
    }

    /**
     * @author Jelle
     * @param promotor koppelt de promotor met de geselecteerde studenten
     */
    public void koppelPromotorEnGeselecteerdeStudenten(Promotor promotor) {
        while (heeftPromotorNogPlaatsVoorStudenten(promotor) && geselecteerdeStudenten.get(0) != null) {
            koppelStudentEnPromotor(geselecteerdeStudenten.get(0), promotor);
            geselecteerdeStudenten.remove(0);
        }

        if (!heeftPromotorNogPlaatsVoorStudenten(promotor) && geselecteerdeStudenten.get(0) != null) {
            throw new IllegalArgumentException("maximum aantal studenten van deze promotor is bereikt, "
                    + "selecteer een andere promotor");
        }
    }

    /**
     * @author Jelle maakt de lijst van geselecteerde studenten leeg
     */
    public void maakGeselecteerdeStudentenLeeg() {
        geselecteerdeStudenten.clear();
    }

    /**
     *
     * @return geeft alle studenten terug uit de lijst van gebruikers
     */
    public List<Student> geefStudentenlijst() {
        if (gebruikers != null) {
            studentenlijst = new ArrayList();
            for (int i = 0; i < gebruikers.size(); i++) {//zoveel mogelijk enhanced for of iterator
                if (gebruikers.get(i) instanceof Student) {
                    studentenlijst.add((Student) gebruikers.get(i));
                }
            }

            return studentenlijst;
        }
        return null;
    }

    /**
     *
     * @return heeft alle promotoren terug uit de lijst van gebruikers
     */
    public List<Promotor> geefPromotorenlijst() {                            // eventueel dit en studentenlijst samenvoegen naar een generieke methode, om minder duplicate code te hebben.
        if (gebruikers != null) {
            promotorenlijst = new ArrayList();
            for (int i = 0; i < gebruikers.size(); i++) {
                if (gebruikers.get(i) instanceof Promotor) {
                    promotorenlijst.add((Promotor) gebruikers.get(i));
                }
            }

            return promotorenlijst;
        }
        return null;
    }

   /* public void koppelStudentEnPromotor(Student student, Promotor promotor) {
        if (promotor.geefAantalStudenten() == promotor.getMaxStudenten()) {
            throw new IllegalArgumentException("Maximum aantal studenten is bereikt");
        }

        student.setPromotor(promotor);
        promotor.addStudent(student);

    }*/

    /* --- Mappers en onderstaande code: Test om gegevens in scherm te krijgen --- */
    private Mapper<E> mapper;
	//private Mapper<Promotor> pMapper;
    ///*      
/*	public <E> void setMapper(Mapper<E> mapper)
     {
     this.mapper = (Mapper<E>) mapper;
     }*/

    /*
     public void setMapper(Mapper<Promotor> mapper)
     {
     this.pMapper = mapper;
     }*/
    private void opvragenStudenten() {
        if (mapper == null || !mapper.getClass().equals(Student.class)) {
            mapper = MapperFactory.geefMapper(SoortMapper.STUDENT);
        }
        studentenlijst = (List<Student>) mapper.geefLijst();
    }

    private void opvragenPromotoren() {
        if (mapper == null || !mapper.getClass().equals(Promotor.class)) {
            mapper = MapperFactory.geefMapper(SoortMapper.PROMOTOR);
        }
        promotorenlijst = (List<Promotor>) mapper.geefLijst();
    }
//*/        

    public int geefAantalStudenten() {
        if (studentenlijst == null) {
            opvragenStudenten();
        }
        //geefStudentenlijst();//opvragenStudenten();
        return studentenlijst.size();
    }

    public int geefAantalPromotoren() {
        if (promotorenlijst == null) {
            opvragenPromotoren();
        }
        return promotorenlijst.size();
    }

    /*public Student geefStudent(int rij) 
     {
     System.out.println("ping student");
     if(studentenlijst == null)
     opvragenStudenten();
     //geefStudentenlijst();//opvragenStudenten();
     return studentenlijst.get(rij);
     }*/
    public Promotor geefBeschikbarePromotor(int rij) {
        if (promotorenlijst == null) {
            geefPromotorenlijst();
        }

        // if()
        return promotorenlijst.get(rij);
    }

    public List<Student> geefAlleStudenten() {
        opvragenStudenten();
        return studentenlijst;
    }

    public List<Promotor> geefAllePromotoren() {
        opvragenPromotoren();
        return promotorenlijst;
    }

    public List<Student> geefStudentZonderProm() { //lijst in tablemodel die dan opvullen met de juiste lijst uit campus( bv zonder promotor of iedereen
        List<Student> studenten = new ArrayList<>();
        if (studentenlijst == null) {
            geefAlleStudenten();
        }
        for (Student s : studentenlijst) {
            if (s.getPromotor() == null) {
                studenten.add(s);
            }
        }
        return studenten;
    }

    // public List<Student> geefGeselecteerdeStudenten() {
    //    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    //}
}